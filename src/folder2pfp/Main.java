/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package folder2pfp;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.List;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BarcodeQRCode;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author neonex
 */
public class Main extends javax.swing.JFrame {

    int nf = 0;
    Queue<ItemClass> qIc = new LinkedList<>();
    Queue<ItemClass> qNotFound = new LinkedList<>();
    String workingDir;
    int Adjx = 0, Adjy = 0, Adjwidth = 0, Adjheight = 0;
    String Gpath;
    ConcurrentLinkedQueue<ProcessClass> ProcedureCallsOnline = new ConcurrentLinkedQueue<ProcessClass>();
    ConcurrentLinkedQueue<String> DISTINCTDISTRICTT = new ConcurrentLinkedQueue<String>();
    int fileProcessed = 0;
    Thread daemonProcedureThread = null;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        ArrayList<String> ls = new ArrayList<String>();
        for (Field field : PageSize.class.getDeclaredFields()) {
            System.out.println(field.getName()
                    + " - " + field.getType()
            );
            ls.add(field.getName());
        }

        jComboBox1.setModel(new DefaultComboBoxModel(ls.toArray()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Program to Convert Images in a Directory to PDF ");

        jButton1.setText("Select Directory ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Click to Select Directory ");

        jLabel3.setText("Select Export PDF Size ");

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        jButton2.setText("Export PDF ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField2.setText("**************************************************************");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2))
                            .addComponent(jButton2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 18, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String path = getFile();
        if (path != null) {
            Gpath = path;
            SearchDirectory(Gpath, "jpg");
            ConsoleMsg(Gpath);

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Object o = jComboBox1.getSelectedItem();

        export2PDF(o);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    public void export2PDF(Object pz) {

        final String FEntry;
        FEntry = JOptionPane.showInputDialog("Enter File Name ");
        new SwingWorker<Void, Void>() {
            String shift_id = FEntry;

            String examdatename = pz.toString() + "_EXPORT_" + "_" + FEntry;

            @Override
            protected void done() {
//                try {
//                    PrintPdf p = new PrintPdf(examdatename + ".pdf");
//
//                } catch (IOException ex) {
//                } catch (PrinterException ex) {
//                }

            }

            @Override
            protected Void doInBackground() {

                String shiftcode = FEntry;
                ResultSet rs = null;
                PreparedStatement prepstmt = null;

                ConsoleMsg("Generating Document");

                Document document = new Document(PageSize.getRectangle(pz.toString()));

                try {
                    PdfWriter writer = PdfWriter.getInstance(document,
                            new FileOutputStream(examdatename + ".pdf"));

                    // step 2
                    document.open();

                    //   Paragraph heading = new Paragraph("﻿Race Report Shift Code " + shift_selector.getSelectedItem().toString(), new Font(Font.FontFamily.HELVETICA, 18f, Font.BOLD));
                    //   heading.setAlignment(1);
                    //  heading.setSpacingAfter(5f);
                    Paragraph headingRun = new Paragraph(FEntry + " Image Export  " + "\n\n", new Font(Font.FontFamily.HELVETICA, 11f, Font.BOLD));
                    headingRun.setAlignment(1);
                    //  headingRun.setSpacingAfter(5f);

                    Paragraph heading2 = new Paragraph("﻿****************************", new Font(Font.FontFamily.HELVETICA, 18f, Font.BOLD));
                    heading2.setAlignment(1);

                    //   com.itextpdf.text.Image csbcHeader = com.itextpdf.text.Image.getInstance(ImageIO.read(ClassLoader.getSystemResource("images/csbcHeader.jpg")), null);
                    //   csbcHeader.scaleToFit(50f, 100f);
                    Font font = FontFactory.getFont("Times-Roman");

                    Font fontbold = FontFactory.getFont("Times-Roman", 8, Font.NORMAL);

                    PdfPTable csbcHeaderPartOne = new PdfPTable(1);
                    //  csbcHeaderPartOne.addCell(csbcHeader);
                    document.add(csbcHeaderPartOne);
                    //   document.add(heading);
                    document.add(headingRun);

                    PdfContentByte cb = writer.getDirectContent();
                    String text = "";
                    int counter = 1;
                    while (!DISTINCTDISTRICTT.isEmpty()) {
                        String filepath = DISTINCTDISTRICTT.poll();
                        File image = new File(filepath);
                        FileInputStream fis = new FileInputStream(image);
                        int indentation = 0;
                        com.itextpdf.text.Image dp = com.itextpdf.text.Image.getInstance(ImageIO.read(fis), null);
                        float scaler = ((document.getPageSize().getWidth() - document.leftMargin()
                                - document.rightMargin() - indentation) / dp.getWidth()) * 100;

                        dp.scalePercent(scaler);
                        document.add(dp);
                        ConsoleMsg("Generating Thumbnails " + counter);
                        counter++;
                    }
                    ConsoleMsg("Image Writing to File ");
                    BarcodeQRCode qrcode = new BarcodeQRCode("S/W Developed By ANKITAPPS ", 1, 1, null);
                    com.itextpdf.text.Image qrcodeImage = qrcode.getImage();
                    qrcodeImage.setAbsolutePosition(10f, 10f);
                    qrcodeImage.scalePercent(200);
                    document.add(qrcodeImage);

                    document.close();
                    ConsoleMsg("PDF FULL REPORT GENERATED");
                } catch (Exception ex) {
                    ConsoleMsg(ex.getMessage());
                }

                return null;
            }

            private PdfPCell createValueCell(String text) {
                // font
                Font font = new Font(Font.FontFamily.HELVETICA, 8, Font.NORMAL, BaseColor.BLACK);

                // create cell
                PdfPCell cell = new PdfPCell(new Phrase(text, font));

                return cell;
            }

        }.execute();

    }
    public String getFile() {
        JFileChooser chooser;
        int result;

        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select SQL FILE ");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(Main.this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());
            return chooser.getSelectedFile().toString().trim();
        } else {
            System.out.println("No Selection ");
            return null;
        }

    }

    public void SearchDirectory(final String sDir) {
        new Thread(new Runnable() {

            @Override
            public void run() {

                File[] faFiles = new File(sDir).listFiles();
                for (File file : faFiles) {
                    if (file.getName().matches("^(.*jpg)")) {
                        System.out.println("**********" + file.getAbsolutePath());
//                        try {
//                            startUploading(file.getAbsolutePath(), file.getName().replace(" ", ""));
//                        } catch (FileNotFoundException ex) {
//                            //     Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (SQLException ex) {
//                            //     Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (PropertyVetoException ex) {
//                            //     Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (IOException ex) {
//                            //      Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//                        }

                    }
                    if (file.isDirectory()) {
                        ConsoleMsg(file.getAbsolutePath());
                        SearchDirectory(file.getAbsolutePath());
                    }
                }
            }

        }
        ).start();

    }

    public void SearchDirectory(final String sDir, String pattern) {
        new Thread(new Runnable() {

            @Override
            public void run() {

                File[] faFiles = new File(sDir).listFiles();
                for (File file : faFiles) {
                    if (file.getName().matches("^(.*" + pattern + ")") || file.getName().matches("^(.*" + pattern.toUpperCase() + ")")) {
                        System.out.println("**********" + file.getAbsolutePath());
                        ConsoleMsg("**********" + file.getAbsolutePath());

                        if (pattern.equalsIgnoreCase("bmp")) {
                            ProcessClass c = new ProcessClass();
                            c.setFilepath(file.getAbsolutePath());
                            c.setFilename(file.getName());
                            c.setExtension("bmp");
                            ProcedureCallsOnline.add(c);
                            console.setText("");
                            console.setText("File Found " + ProcedureCallsOnline.size());

                        }

                        if (pattern.equalsIgnoreCase("fmt")) {
                            ProcessClass c = new ProcessClass();
                            c.setFilepath(file.getAbsolutePath());
                            c.setFilename(file.getName());
                            c.setExtension("fmt");
                            ProcedureCallsOnline.add(c);
                            console.setText("");
                            console.setText("File Found " + ProcedureCallsOnline.size());

                        }

                        if (pattern == "png") {

                            ProcessClass c = new ProcessClass();
                            c.setFilepath(file.getAbsolutePath());
                            c.setFilename(file.getName());
                            c.setExtension("png");
                            ProcedureCallsOnline.add(c);
                            console.setText("");
                            console.setText("File Found " + ProcedureCallsOnline.size());
                        }
                        if (pattern == "jpg" || pattern == "JPG") {

                            ProcessClass c = new ProcessClass();
                            c.setFilepath(file.getAbsolutePath());
                            c.setFilename(file.getName());
                            c.setExtension("jpg");
                            ProcedureCallsOnline.add(c);
                            DISTINCTDISTRICTT.add(file.getAbsolutePath());
                            console.setText("");
                            console.setText("File Found " + ProcedureCallsOnline.size());
                        }
                    }
                    if (file.isDirectory()) {
                        ConsoleMsg(file.getAbsolutePath());
                        //   SearchDirectory(file.getAbsolutePath());
                        if (pattern.equalsIgnoreCase("fmt")) {
                            SearchDirectory(file.getAbsolutePath(), "fmt");
                        }
                        if (pattern.equalsIgnoreCase("bmp")) {
                            SearchDirectory(file.getAbsolutePath(), "bmp");
                        }
                        if (pattern.equalsIgnoreCase("png")) {
                            SearchDirectory(file.getAbsolutePath(), "png");
                        }
                        if (pattern.equalsIgnoreCase("jpg")) {
                            SearchDirectory(file.getAbsolutePath(), "jpg");
                        }
                        if (pattern.equalsIgnoreCase("JPG")) {
                            SearchDirectory(file.getAbsolutePath(), "JPG");
                        }
                    }
                }
            }

        }
        ).start();

    }

    public void ConsoleMsg(String msg) {

        console.append("\n" + msg);
        console.setCaretPosition(console.getDocument().getLength());
    }

    public void startDeamon() {

        Thread daemonProcedureThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    while (true) {
                        if (ProcedureCallsOnline.isEmpty()) {
                            jTextField2.setText(String.valueOf(ProcedureCallsOnline.size()));
                        } else {
                            ProcessClass str;
                            System.out.println("Reading Data From Server Started");
                            jTextField2.setText(String.valueOf(ProcedureCallsOnline.size()));
                            while ((str = ProcedureCallsOnline.poll()) != null) {
                                jTextField2.setText(" REM # " + String.valueOf(ProcedureCallsOnline.size()));
                                System.err.println(str.filepath);
                                //  getBinary(str);

                                if (str.getExtension().equalsIgnoreCase("jpg") || str.getExtension().equalsIgnoreCase("JPG")) {

                                    Thread.sleep(100);
                                }
                                fileProcessed++;
                                jTextField2.setText(String.valueOf(fileProcessed));
                            }
                        }
                    }
                } catch (Exception e) {

                } finally {

                    System.out.println("Daemon Thread exiting"); //never called
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException ex) {

                    }

                    startDeamon();
                }
            }
        }, "Daemon-Procedure-Thread");

        daemonProcedureThread.setDaemon(true); //making this thread daemon
        daemonProcedureThread.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
